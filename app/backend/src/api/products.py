from fastapi import APIRouter, Depends, HTTPException, Request, Query, status
from uuid import UUID
from ..core.models import ProductCreate, ProductOut, ProductDetailsOut, ProductUpdate, CategoryOut, PaginatedProductsResponse
from cassandra.cqlengine.query import DoesNotExist
import uuid
from typing import List, Optional
from decimal import Decimal
from pydantic import BaseModel

router = APIRouter(
    prefix="/products",
    tags=["üõçÔ∏è Products & Catalog"],
    responses={
        500: {"description": "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"},
        503: {"description": "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
    }
)

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
class ProductNotFoundError(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—à–∏–±–∫–∏ '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'"""
    detail: str = "Product not found"

class ValidationError(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    detail: str = "Validation error"
    
class DatabaseError(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    detail: str = "Database connection error"


def get_cassandra_session(request: Request):
    return request.app.state.cassandra_session


@router.get(
    "/", 
    response_model=PaginatedProductsResponse,
    summary="üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤",
    description="""
    ## –û–ø–∏—Å–∞–Ω–∏–µ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ.
    
    ## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    - üí∞ **min_price** - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    - üí∞ **max_price** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    
    ## –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    - üìù **sort_by**: `name` (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é) –∏–ª–∏ `price` (–ø–æ —Ü–µ–Ω–µ)
    - üîÑ **sort_order**: `asc` (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é) –∏–ª–∏ `desc` (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    
    ## –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    - üìÑ **skip** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (offset)
    - üìä **limit** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-100)
    
    ## –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    ```json
    {
        "items": [...],      // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        "total": 150,        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        "page": 1,           // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        "pages": 2,          // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        "has_next": true,    // –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        "has_prev": false    // –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    }
    ```
    """,
    responses={
        200: {
            "description": "‚úÖ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "items": [
                            {
                                "product_id": "550e8400-e29b-41d4-a716-446655440000",
                                "name": "–ú–æ–ª–æ–∫–æ '–ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ' 3.2%",
                                "category": "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                                "price": 99.90
                            }
                        ],
                        "total": 1,
                        "page": 1,
                        "pages": 1,
                        "has_next": False,
                        "has_prev": False
                    }
                }
            }
        },
        400: {
            "description": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞",
            "model": ValidationError
        }
    }
)
def list_products(
    session=Depends(get_cassandra_session),
    skip: int = Query(0, ge=0, description="üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"),
    limit: int = Query(100, ge=1, le=100, description="üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
    sort_by: Optional[str] = Query(None, regex="^(name|price)$", description="üî§ –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: name –∏–ª–∏ price"),
    sort_order: str = Query("asc", regex="^(asc|desc)$", description="üîÑ –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: asc (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é) –∏–ª–∏ desc (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)"),
    min_price: Optional[float] = Query(None, ge=0, description="üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)"),
    max_price: Optional[float] = Query(None, ge=0, description="üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)")
):
    """
    ## –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
    
    ### –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    1. üîç –ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ü–µ–Ω–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
    2. üî§ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)  
    3. üìÑ –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    4. üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    
    ### –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
    ‚ö†Ô∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç `ALLOW FILTERING` –≤ Cassandra, —á—Ç–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ç–æ—Ä–∏—á–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if min_price is not None and max_price is not None and min_price > max_price:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="min_price –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ max_price"
            )
        
        # Start with basic query
        query = "SELECT id, name, category, price FROM products"
        params = []
        
        # Apply price filtering if provided
        filters = []
        if min_price is not None:
            filters.append("price >= %s")
            params.append(str(min_price))  # –ü–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è Cassandra
        if max_price is not None:
            filters.append("price <= %s")
            params.append(str(max_price))  # –ü–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è Cassandra
        
        if filters:
            query += " WHERE " + " AND ".join(filters) + " ALLOW FILTERING"
        
        # Execute the query
        rows = session.execute(query, params)
        
        # Convert to list for sorting and pagination
        products = [ProductOut(product_id=row.id, name=row.name, category=row.category, price=row.price) for row in rows]
        
        # Get total count for pagination metadata
        total_count = len(products)
        
        # Apply sorting
        if sort_by:
            reverse = sort_order == "desc"
            if sort_by == "name":
                products.sort(key=lambda x: x.name, reverse=reverse)
            elif sort_by == "price":
                products.sort(key=lambda x: float(x.price), reverse=reverse)
        
        # Apply pagination
        paginated_products = products[skip:skip+limit]
        
        # Calculate pagination metadata
        total_pages = (total_count + limit - 1) // limit if total_count > 0 else 1
        
        return {
            "items": paginated_products,
            "total": total_count,
            "page": (skip // limit) + 1,
            "pages": total_pages,
            "has_next": skip + limit < total_count,
            "has_prev": skip > 0
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}"
        )


@router.post(
    "/", 
    response_model=ProductDetailsOut, 
    status_code=201,
    summary="‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
    description="""
    ## –û–ø–∏—Å–∞–Ω–∏–µ
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥ –º–∞–≥–∞–∑–∏–Ω–∞.
    
    ## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
    - üè∑Ô∏è **name** - —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (1-200 —Å–∏–º–≤–æ–ª–æ–≤)
    - üìÅ **category** - –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ (1-50 —Å–∏–º–≤–æ–ª–æ–≤)  
    - üí∞ **price** - —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (–±–æ–ª—å—à–µ 0, –¥–æ 99,999,999.99)
    - üì¶ **stock_count** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ (–Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
    - üìù **description** - –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
    - üè≠ **manufacturer** - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
    
    ## –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –≤–∫–ª—é—á–∞—è –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–π UUID.
    """,
    responses={
        201: {
            "description": "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "product_id": "550e8400-e29b-41d4-a716-446655440000",
                        "name": "–ú–æ–ª–æ–∫–æ '–ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ' 3.2%",
                        "category": "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                        "price": 99.90,
                        "stock_count": 150,
                        "description": "–û—Ç–±–æ—Ä–Ω–æ–µ –ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ",
                        "manufacturer": "–û–û–û '–î–∞–Ω–æ–Ω –†–æ—Å—Å–∏—è'"
                    }
                }
            }
        },
        400: {
            "description": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞",
            "model": ValidationError
        },
        500: {
            "description": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            "model": DatabaseError
        }
    }
)
def create_product(product: ProductCreate, session=Depends(get_cassandra_session)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
    product_id = uuid.uuid4()
    session.execute(
        """
        INSERT INTO products (id, name, category, price, quantity, description, manufacturer)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        """,
        (product_id, product.name, product.category, product.price, product.stock_count, product.description, product.manufacturer)
    )
    return ProductDetailsOut(product_id=product_id, **product.model_dump())


@router.get("/{product_id}", response_model=ProductDetailsOut)
def get_product(product_id: UUID, session=Depends(get_cassandra_session)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID."""
    query = "SELECT id, name, category, price, quantity, description, manufacturer FROM products WHERE id = %s"
    row = session.execute(query, [product_id]).one()
    if not row:
        raise HTTPException(status_code=404, detail="Product not found")
    return ProductDetailsOut(
        product_id=row.id,
        name=row.name,
        category=row.category,
        price=row.price,
        stock_count=row.quantity,
        description=row.description,
        manufacturer=row.manufacturer
    )


@router.put("/{product_id}", response_model=ProductDetailsOut)
def update_product(product_id: UUID, product_update: ProductUpdate, session=Depends(get_cassandra_session)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID."""
    # First, get the current product
    get_query = "SELECT id, name, category, price, quantity, description, manufacturer FROM products WHERE id = %s"
    current_product_row = session.execute(get_query, [product_id]).one()
    if not current_product_row:
        raise HTTPException(status_code=404, detail="Product not found")

    current_product = ProductDetailsOut(
        product_id=current_product_row.id,
        name=current_product_row.name,
        category=current_product_row.category,
        price=current_product_row.price,
        stock_count=current_product_row.quantity,
        description=current_product_row.description,
        manufacturer=current_product_row.manufacturer,
    )
    
    update_data = product_update.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        setattr(current_product, key, value)

    update_query = """
        UPDATE products
        SET name = %s, category = %s, price = %s, quantity = %s, description = %s, manufacturer = %s
        WHERE id = %s
    """
    session.execute(
        update_query,
        (
            current_product.name,
            current_product.category,
            current_product.price,
            current_product.stock_count,
            current_product.description,
            current_product.manufacturer,
            product_id,
        ),
    )
    return current_product

@router.delete("/{product_id}", status_code=204)
def delete_product(product_id: UUID, session=Depends(get_cassandra_session)):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID."""
    query = "DELETE FROM products WHERE id = %s"
    session.execute(query, [product_id])
    return

# New endpoints

@router.get("/categories/list", response_model=List[CategoryOut])
def list_categories(session=Depends(get_cassandra_session)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–π."""
    # Get all products' categories
    categories_query = "SELECT category FROM products ALLOW FILTERING"
    categories_rows = session.execute(categories_query)
    
    # Use a dictionary to track unique categories and counts
    category_counts = {}
    for row in categories_rows:
        category = row.category
        if category in category_counts:
            category_counts[category] += 1
        else:
            category_counts[category] = 1
    
    # Convert to result format
    result = []
    for category, count in category_counts.items():
        result.append(CategoryOut(
            name=category,
            product_count=count
        ))
    
    return result

@router.get("/by-category/{category}", response_model=PaginatedProductsResponse)
def get_products_by_category(
    category: str,
    session=Depends(get_cassandra_session),
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=100),
    sort_by: Optional[str] = Query(None, description="Field to sort by: name, price"),
    sort_order: Optional[str] = Query("asc", description="Sort order: asc or desc"),
    min_price: Optional[float] = Query(None, ge=0, description="Minimum price filter"),
    max_price: Optional[float] = Query(None, ge=0, description="Maximum price filter")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π."""
    # Start with base query
    query = "SELECT id, name, category, price FROM products WHERE category = %s"
    params = [category]
    
    # Apply price filtering if provided
    filters = []
    if min_price is not None:
        filters.append("price >= %s")
        params.append(Decimal(str(min_price)))
    if max_price is not None:
        filters.append("price <= %s")
        params.append(Decimal(str(max_price)))
    
    if filters:
        query += " AND " + " AND ".join(filters)
    
    # Add ALLOW FILTERING since we're filtering on non-primary key
    query += " ALLOW FILTERING"
    
    # Execute the query
    rows = session.execute(query, params)
    
    # Convert to list for sorting and pagination
    products = [ProductOut(product_id=row.id, name=row.name, category=row.category, price=row.price) for row in rows]
    
    # Get total count for pagination metadata
    total_count = len(products)
    
    # Apply sorting
    if sort_by:
        reverse = sort_order.lower() == "desc"
        if sort_by == "name":
            products.sort(key=lambda x: x.name, reverse=reverse)
        elif sort_by == "price":
            products.sort(key=lambda x: float(x.price), reverse=reverse)
    
    # Apply pagination
    paginated_products = products[skip:skip+limit]
    
    # Calculate pagination metadata
    total_pages = (total_count + limit - 1) // limit if limit > 0 else 0
    
    return {
        "items": paginated_products,
        "total": total_count,
        "page": (skip // limit) + 1 if limit > 0 else 1,
        "pages": total_pages,
        "has_next": skip + limit < total_count,
        "has_prev": skip > 0
    }
