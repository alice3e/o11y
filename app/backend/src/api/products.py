from fastapi import APIRouter, Depends, HTTPException, Request, Query, status
from uuid import UUID
from ..core.models import ProductCreate, ProductOut, ProductDetailsOut, ProductUpdate, CategoryOut, PaginatedProductsResponse
from ..auth import get_user_info, get_admin_user
from cassandra.cqlengine.query import DoesNotExist
import uuid
import time
from typing import List, Optional
from decimal import Decimal
from pydantic import BaseModel

router = APIRouter(
    prefix="/products",
    tags=["üõçÔ∏è Products & Catalog"],
    responses={
        500: {"description": "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"},
        503: {"description": "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
    }
)

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
class ProductNotFoundError(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—à–∏–±–∫–∏ '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'"""
    detail: str = "Product not found"

class ValidationError(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    detail: str = "Validation error"
    
class DatabaseError(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    detail: str = "Database connection error"


def get_cassandra_session(request: Request):
    return request.app.state.cassandra_session


def get_metrics_collector():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫"""
    try:
        from ..services.metrics import metrics_collector
        return metrics_collector
    except ImportError:
        return None


@router.get(
    "/", 
    response_model=PaginatedProductsResponse,
    summary="üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤",
    description="""
    ## –û–ø–∏—Å–∞–Ω–∏–µ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    
    **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:**
    - üë§ **–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**: –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä `category` –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
    - üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã**: –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    
    ## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    - ÔøΩ **category** - –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    - ÔøΩüí∞ **min_price** - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    - üí∞ **max_price** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    
    ## –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    - üìù **sort_by**: `name` (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é) –∏–ª–∏ `price` (–ø–æ —Ü–µ–Ω–µ)
    - üîÑ **sort_order**: `asc` (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é) –∏–ª–∏ `desc` (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    
    ## –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    - üìÑ **skip** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (offset)
    - üìä **limit** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-100)
    """,
    responses={
        200: {
            "description": "‚úÖ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω"
        },
        400: {
            "description": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞",
            "model": ValidationError
        },
        401: {
            "description": "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
        },
        403: {
            "description": "üö´ –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
        }
    }
)
def list_products(
    session=Depends(get_cassandra_session),
    user_info=Depends(get_user_info),
    category: Optional[str] = Query(None, description="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"),
    skip: int = Query(0, ge=0, description="üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"),
    limit: int = Query(100, ge=1, le=100, description="üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
    sort_by: Optional[str] = Query(None, regex="^(name|price)$", description="üî§ –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: name –∏–ª–∏ price"),
    sort_order: str = Query("asc", regex="^(asc|desc)$", description="üîÑ –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: asc (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é) –∏–ª–∏ desc (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)"),
    min_price: Optional[float] = Query(None, ge=0, description="üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)"),
    max_price: Optional[float] = Query(None, ge=0, description="üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)")
):
    """
    ## –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–æ—Å—Ç—É–ø–∞
    
    ### –õ–æ–≥–∏–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞:
    - üë§ **–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**: –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä `category`
    - üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã**: –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    ### –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    1. ÔøΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    2. ÔøΩüîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–µ–Ω–µ
    3. üî§ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏  
    4. üìÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    5. üìä –†–∞—Å—á–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    metrics_collector = get_metrics_collector()
    start_time = time.time()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
        is_admin = user_info and user_info.get("is_admin", False)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
        if not is_admin and not category:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä 'category'."
            )
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ü–µ–Ω—ã
        if min_price is not None and max_price is not None and min_price > max_price:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="min_price –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ max_price"
            )
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        if category:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            query = "SELECT id, name, category, price FROM products WHERE category = %s"
            params = [category]
        else:
            # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            query = "SELECT id, name, category, price FROM products"
            params = []
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ
        price_filters = []
        if min_price is not None:
            price_filters.append("price >= %s")
            params.append(str(min_price))
        if max_price is not None:
            price_filters.append("price <= %s")
            params.append(str(max_price))
        
        if price_filters:
            if category:
                query += " AND " + " AND ".join(price_filters)
            else:
                query += " WHERE " + " AND ".join(price_filters)
        
        # –î–æ–±–∞–≤–ª—è–µ–º ALLOW FILTERING –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        if category or price_filters:
            query += " ALLOW FILTERING"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        query_start_time = time.time()
        rows = session.execute(query, params)
        if metrics_collector:
            query_duration = time.time() - query_start_time
            metrics_collector.record_db_query('select_products', query_duration)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        products = [ProductOut(product_id=row.id, name=row.name, category=row.category, price=row.price) for row in rows]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        total_count = len(products)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if sort_by:
            reverse = sort_order == "desc"
            if sort_by == "name":
                products.sort(key=lambda x: x.name, reverse=reverse)
            elif sort_by == "price":
                products.sort(key=lambda x: float(x.price), reverse=reverse)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        paginated_products = products[skip:skip+limit]
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        total_pages = (total_count + limit - 1) // limit if total_count > 0 else 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö
        if metrics_collector:
            metrics_collector.update_product_metrics()
        
        return {
            "items": paginated_products,
            "total": total_count,
            "page": (skip // limit) + 1,
            "pages": total_pages,
            "has_next": skip + limit < total_count,
            "has_prev": skip > 0
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}"
        )


@router.post(
    "/", 
    response_model=ProductDetailsOut, 
    status_code=201,
    summary="‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)",
    description="""
    ## –û–ø–∏—Å–∞–Ω–∏–µ
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥ –º–∞–≥–∞–∑–∏–Ω–∞.
    
    **‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è:**
    - üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    - üëë –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    ## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
    - üè∑Ô∏è **name** - —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (1-200 —Å–∏–º–≤–æ–ª–æ–≤)
    - üìÅ **category** - –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ (1-50 —Å–∏–º–≤–æ–ª–æ–≤)  
    - üí∞ **price** - —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (–±–æ–ª—å—à–µ 0, –¥–æ 99,999,999.99)
    - üì¶ **stock_count** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ (–Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
    - üìù **description** - –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
    - üè≠ **manufacturer** - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
    """,
    responses={
        201: {
            "description": "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
        },
        401: {
            "description": "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
        },
        403: {
            "description": "üëë –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        },
        400: {
            "description": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞",
            "model": ValidationError
        },
        500: {
            "description": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            "model": DatabaseError
        }
    }
)
def create_product(
    product: ProductCreate, 
    session=Depends(get_cassandra_session),
    admin_user=Depends(get_admin_user)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
    metrics_collector = get_metrics_collector()
    
    product_id = uuid.uuid4()
    
    query_start_time = time.time()
    session.execute(
        """
        INSERT INTO products (id, name, category, price, quantity, description, manufacturer)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        """,
        (product_id, product.name, product.category, product.price, product.stock_count, product.description, product.manufacturer)
    )
    
    if metrics_collector:
        query_duration = time.time() - query_start_time
        metrics_collector.record_db_query('insert_product', query_duration)
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        metrics_collector.update_product_metrics()
    
    return ProductDetailsOut(product_id=product_id, **product.model_dump())


@router.get("/{product_id}", response_model=ProductDetailsOut)
def get_product(product_id: UUID, session=Depends(get_cassandra_session)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID."""
    metrics_collector = get_metrics_collector()
    
    query = "SELECT id, name, category, price, quantity, description, manufacturer FROM products WHERE id = %s"
    
    query_start_time = time.time()
    row = session.execute(query, [product_id]).one()
    
    if metrics_collector:
        query_duration = time.time() - query_start_time
        metrics_collector.record_db_query('select_product_by_id', query_duration)
    
    if not row:
        raise HTTPException(status_code=404, detail="Product not found")
    return ProductDetailsOut(
        product_id=row.id,
        name=row.name,
        category=row.category,
        price=row.price,
        stock_count=row.quantity,
        description=row.description,
        manufacturer=row.manufacturer
    )


@router.put("/{product_id}", response_model=ProductDetailsOut)
def update_product(product_id: UUID, product_update: ProductUpdate, session=Depends(get_cassandra_session)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID."""
    metrics_collector = get_metrics_collector()
    
    # First, get the current product
    get_query = "SELECT id, name, category, price, quantity, description, manufacturer FROM products WHERE id = %s"
    
    query_start_time = time.time()
    current_product_row = session.execute(get_query, [product_id]).one()
    
    if metrics_collector:
        query_duration = time.time() - query_start_time
        metrics_collector.record_db_query('select_product_for_update', query_duration)
    
    if not current_product_row:
        raise HTTPException(status_code=404, detail="Product not found")

    current_product = ProductDetailsOut(
        product_id=current_product_row.id,
        name=current_product_row.name,
        category=current_product_row.category,
        price=current_product_row.price,
        stock_count=current_product_row.quantity,
        description=current_product_row.description,
        manufacturer=current_product_row.manufacturer,
    )
    
    update_data = product_update.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        setattr(current_product, key, value)

    update_query = """
        UPDATE products
        SET name = %s, category = %s, price = %s, quantity = %s, description = %s, manufacturer = %s
        WHERE id = %s
    """
    
    query_start_time = time.time()
    session.execute(
        update_query,
        (
            current_product.name,
            current_product.category,
            current_product.price,
            current_product.stock_count,
            current_product.description,
            current_product.manufacturer,
            product_id,
        ),
    )
    
    if metrics_collector:
        query_duration = time.time() - query_start_time
        metrics_collector.record_db_query('update_product', query_duration)
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        metrics_collector.update_product_metrics()
    
    return current_product

@router.delete("/{product_id}", status_code=204)
def delete_product(product_id: UUID, session=Depends(get_cassandra_session)):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID."""
    metrics_collector = get_metrics_collector()
    
    query = "DELETE FROM products WHERE id = %s"
    
    query_start_time = time.time()
    session.execute(query, [product_id])
    
    if metrics_collector:
        query_duration = time.time() - query_start_time
        metrics_collector.record_db_query('delete_product', query_duration)
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        metrics_collector.update_product_metrics()
    
    return

# New endpoints

@router.get("/categories/list", response_model=List[CategoryOut])
def list_categories(session=Depends(get_cassandra_session)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–π."""
    metrics_collector = get_metrics_collector()
    
    # Get all products' categories
    categories_query = "SELECT category FROM products ALLOW FILTERING"
    
    query_start_time = time.time()
    categories_rows = session.execute(categories_query)
    
    if metrics_collector:
        query_duration = time.time() - query_start_time
        metrics_collector.record_db_query('select_categories', query_duration)
    
    # Use a dictionary to track unique categories and counts
    category_counts = {}
    for row in categories_rows:
        category = row.category
        if category in category_counts:
            category_counts[category] += 1
        else:
            category_counts[category] = 1
    
    # Convert to result format
    result = []
    for category, count in category_counts.items():
        result.append(CategoryOut(
            name=category,
            product_count=count
        ))
    
    return result

@router.get("/by-category/{category}", response_model=PaginatedProductsResponse)
def get_products_by_category(
    category: str,
    session=Depends(get_cassandra_session),
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=100),
    sort_by: Optional[str] = Query(None, description="Field to sort by: name, price"),
    sort_order: Optional[str] = Query("asc", description="Sort order: asc or desc"),
    min_price: Optional[float] = Query(None, ge=0, description="Minimum price filter"),
    max_price: Optional[float] = Query(None, ge=0, description="Maximum price filter")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π."""
    # Start with base query
    query = "SELECT id, name, category, price FROM products WHERE category = %s"
    params = [category]
    
    # Apply price filtering if provided
    filters = []
    if min_price is not None:
        filters.append("price >= %s")
        params.append(Decimal(str(min_price)))
    if max_price is not None:
        filters.append("price <= %s")
        params.append(Decimal(str(max_price)))
    
    if filters:
        query += " AND " + " AND ".join(filters)
    
    # Add ALLOW FILTERING since we're filtering on non-primary key
    query += " ALLOW FILTERING"
    
    # Execute the query
    rows = session.execute(query, params)
    
    # Convert to list for sorting and pagination
    products = [ProductOut(product_id=row.id, name=row.name, category=row.category, price=row.price) for row in rows]
    
    # Get total count for pagination metadata
    total_count = len(products)
    
    # Apply sorting
    if sort_by:
        reverse = sort_order.lower() == "desc"
        if sort_by == "name":
            products.sort(key=lambda x: x.name, reverse=reverse)
        elif sort_by == "price":
            products.sort(key=lambda x: float(x.price), reverse=reverse)
    
    # Apply pagination
    paginated_products = products[skip:skip+limit]
    
    # Calculate pagination metadata
    total_pages = (total_count + limit - 1) // limit if limit > 0 else 0
    
    return {
        "items": paginated_products,
        "total": total_count,
        "page": (skip // limit) + 1 if limit > 0 else 1,
        "pages": total_pages,
        "has_next": skip + limit < total_count,
        "has_prev": skip > 0
    }
