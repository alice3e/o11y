---
- name: Detect system architecture
  ansible.builtin.set_fact:
    docker_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture }}"

- name: Verify Ubuntu system
  ansible.builtin.fail:
    msg: "This role only supports Ubuntu systems"
  when: ansible_distribution != "Ubuntu"

- name: Remove old Docker packages
  ansible.builtin.apt:
    name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
    state: absent
  ignore_errors: yes

- name: Install dependencies for Docker repository
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: yes

- name: Create keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Add Docker GPG key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'
    force: yes
  register: gpg_download
  ignore_errors: yes

- name: Add Docker GPG key (alternative method)
  ansible.builtin.shell: |
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg
  when: gpg_download.failed | default(false)

- name: Set GPG key file path
  ansible.builtin.set_fact:
    docker_gpg_key: "{{ '/etc/apt/keyrings/docker.asc' if not (gpg_download.failed | default(false)) else '/etc/apt/keyrings/docker.gpg' }}"

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ docker_arch }} signed-by={{ docker_gpg_key }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    update_cache: yes

- name: Update package cache after adding Docker repository
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 0

- name: Debug system information
  ansible.builtin.debug:
    msg: |
      Architecture: {{ ansible_architecture }}
      Docker arch: {{ docker_arch }}
      Distribution: {{ ansible_distribution }}
      Release: {{ ansible_distribution_release }}

- name: Check available Docker packages
  ansible.builtin.shell: apt-cache search docker-ce
  register: docker_packages
  changed_when: false

- name: Display available Docker packages
  ansible.builtin.debug:
    var: docker_packages.stdout_lines

- name: Install Docker packages
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
  register: docker_install_result
  ignore_errors: yes

- name: Install Docker via convenience script (fallback)
  ansible.builtin.shell: |
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm -f get-docker.sh
  when: docker_install_result.failed | default(false)
  register: docker_script_install

- name: Check if Docker Compose is already available
  ansible.builtin.shell: |
    docker compose version || docker-compose --version || /usr/local/bin/docker-compose --version
  register: existing_compose
  changed_when: false
  ignore_errors: yes

- name: Install Docker Compose plugin (if available)
  ansible.builtin.apt:
    name:
      - docker-compose-plugin
    state: present
  ignore_errors: yes
  when: 
    - not (docker_install_result.failed | default(false))
    - existing_compose.rc != 0

- name: Install Docker Buildx plugin (if available)  
  ansible.builtin.apt:
    name:
      - docker-buildx-plugin
    state: present
  ignore_errors: yes
  when: not (docker_install_result.failed | default(false))

- name: Install Docker Compose via pip (fallback)
  block:
    - name: Install pip if not available
      ansible.builtin.apt:
        name:
          - python3-pip
          - python3-setuptools
          - python3-dev
        state: present
        update_cache: yes

    - name: Verify pip3 installation
      ansible.builtin.command: which pip3
      register: pip3_check
      changed_when: false
      ignore_errors: yes

    - name: Install Docker Compose via pip
      ansible.builtin.pip:
        name: docker-compose
        state: present
        executable: pip3
      when: pip3_check.rc == 0

    - name: Install Docker Compose via apt (alternative)
      ansible.builtin.apt:
        name: docker-compose
        state: present
      when: pip3_check.rc != 0
      ignore_errors: yes
  when: 
    - docker_install_result.failed | default(false)
    - existing_compose.rc != 0

- name: Install Docker Compose standalone (alternative fallback)
  ansible.builtin.shell: |
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
  when: 
    - docker_install_result.failed | default(false)
    - existing_compose.rc != 0
    - not ansible_check_mode
  ignore_errors: yes

- name: Check Docker service status
  ansible.builtin.systemd:
    name: docker
  register: docker_service_status
  ignore_errors: yes

- name: Start Docker service if it exists
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes
  when: docker_service_status.status is defined
  ignore_errors: yes

- name: Start Docker via systemctl (alternative)
  ansible.builtin.shell: |
    systemctl start docker
    systemctl enable docker
  when: docker_service_status.status is not defined
  ignore_errors: yes

- name: Wait for Docker daemon to be ready
  ansible.builtin.wait_for:
    path: /var/run/docker.sock
    timeout: 30
  ignore_errors: yes

- name: Test Docker daemon connectivity
  ansible.builtin.command: docker info
  register: docker_info
  changed_when: false
  ignore_errors: yes

- name: Verify Docker installation
  ansible.builtin.command: docker --version
  register: docker_version
  changed_when: false
  ignore_errors: yes

- name: Display Docker version
  ansible.builtin.debug:
    msg: "Docker version: {{ docker_version.stdout }}"
  when: docker_version.rc == 0

- name: Display Docker info
  ansible.builtin.debug:
    msg: "Docker daemon is {{ 'running' if docker_info.rc == 0 else 'not accessible' }}"

- name: Show Docker service status
  ansible.builtin.debug:
    msg: "Docker service status: {{ docker_service_status }}"

- name: Verify Docker Compose installation
  ansible.builtin.shell: |
    docker-compose --version || docker compose version || /usr/local/bin/docker-compose --version
  register: compose_version
  changed_when: false
  ignore_errors: yes

- name: Display Docker Compose version
  ansible.builtin.debug:
    msg: "Docker Compose version: {{ compose_version.stdout }}"
  when: compose_version.rc == 0

- name: Create docker group if it doesn't exist
  ansible.builtin.group:
    name: docker
    state: present

- name: Add remote user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes