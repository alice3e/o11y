---
- name: Ensure project directory exists
  ansible.builtin.file:
    path: "{{ app_directory }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Clone or update project repository
  ansible.builtin.git:
    repo: "{{ git_repo_url | default('https://github.com/alice3e/o11y') }}"
    dest: "{{ app_directory }}"
    version: "{{ git_branch | default('master') }}"
    force: yes
    clone: yes
    update: yes
  when: deploy_from_git | default(false)
  register: git_result

- name: Debug git clone result
  ansible.builtin.debug:
    var: git_result
  when: deploy_from_git | default(false)

- name: Debug current working directory and paths
  ansible.builtin.debug:
    msg: 
      - "Current working directory: {{ ansible_env.PWD | default('unknown') }}"
      - "Local project path: {{ local_project_path | default(playbook_dir + '/../../') }}"
      - "App directory: {{ app_directory }}"
      - "Deploy from git: {{ deploy_from_git | default(false) }}"
      - "Playbook directory: {{ playbook_dir }}"
      - "Computed source path: {{ local_project_path | default(playbook_dir + '/../../') }}"

- name: Copy project files (when not using git)
  ansible.posix.synchronize:
    src: "{{ local_project_path | default(playbook_dir + '/../../') }}/"
    dest: "{{ app_directory }}/"
    delete: yes
    recursive: yes
    rsync_opts:
      - "--exclude=.git"
      - "--exclude=__pycache__"
      - "--exclude=*.pyc"
      - "--exclude=.env"
      - "--exclude=venv"
      - "--exclude=node_modules"
      - "--verbose"
  when: not (deploy_from_git | default(false))
  register: sync_result

- name: Debug synchronization result
  ansible.builtin.debug:
    var: sync_result
  when: not (deploy_from_git | default(false))

- name: List files in app directory after sync
  ansible.builtin.command: find {{ app_directory }} -name "docker-compose.*" -type f
  register: compose_files_found
  ignore_errors: yes

- name: Debug found compose files
  ansible.builtin.debug:
    msg: "Found compose files: {{ compose_files_found.stdout_lines }}"

- name: List infra directory contents
  ansible.builtin.command: ls -la {{ app_directory }}/infra/
  register: infra_contents
  ignore_errors: yes

- name: Debug infra directory contents
  ansible.builtin.debug:
    msg: "Infra directory contents: {{ infra_contents.stdout_lines }}"

- name: Fallback - copy docker-compose.yml directly if not found
  ansible.builtin.copy:
    src: "{{ local_project_path | default(playbook_dir + '/../../') }}/infra/docker-compose.yml"
    dest: "{{ app_directory }}/infra/docker-compose.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  when: 
    - not (deploy_from_git | default(false))
    - compose_files_found.stdout_lines | length == 0
  ignore_errors: yes

- name: Verify docker-compose.yml exists after copy
  ansible.builtin.stat:
    path: "{{ app_directory }}/infra/docker-compose.yml"
  register: final_compose_check

- name: Debug final compose file status
  ansible.builtin.debug:
    msg: "Final docker-compose.yml exists: {{ final_compose_check.stat.exists }}"

- name: Create required directories structure
  ansible.builtin.file:
    path: "{{ app_directory }}/{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  loop:
    - infra
    - infra/alertmanager
    - infra/grafana
    - infra/prometheus
    - infra/cassandra
    - infra/jaeger
    - infra/locust
    - app
    - scripts

- name: Copy alertmanager token from vault
  ansible.builtin.copy:
    content: "{{ alertmanager_bot_token }}"
    dest: "{{ app_directory }}/infra/alertmanager/token"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'

- name: Create environment file
  ansible.builtin.template:
    src: docker.env.j2
    dest: "{{ app_directory }}/.env"
    mode: '0600'
  when: docker_env_template is defined

- name: Ensure python dependencies for docker are installed
  ansible.builtin.apt:
    name:
      - python3-docker
      - python3-requests
      - python3-yaml
    state: present
    update_cache: yes

- name: Install docker-compose via apt (if available)
  ansible.builtin.apt:
    name: docker-compose
    state: present
  ignore_errors: yes

- name: Install Docker Compose plugin (alternative)
  ansible.builtin.shell: |
    DOCKER_CONFIG=${DOCKER_CONFIG:-/usr/local/lib/docker}
    mkdir -p $DOCKER_CONFIG/cli-plugins
    curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
    chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
  when: not ansible_check_mode
  ignore_errors: yes

- name: Check if docker-compose file exists
  ansible.builtin.find:
    paths: "{{ app_directory }}/infra"
    patterns: "docker-compose.yml,docker-compose.yaml,compose.yml,compose.yaml"
  register: compose_files

- name: Debug compose files
  ansible.builtin.debug:
    msg: |
      Looking for compose files in: {{ app_directory }}/infra
      Found files: {{ compose_files.files | map(attribute='path') | list }}
      Files count: {{ compose_files.matched }}

- name: List directory contents
  ansible.builtin.shell: ls -la "{{ app_directory }}/infra"
  register: infra_contents
  ignore_errors: yes

- name: Show infra directory contents
  ansible.builtin.debug:
    var: infra_contents.stdout_lines

- name: Build Docker images
  community.docker.docker_compose_v2:
    project_src: "{{ app_directory }}/infra"
    build: always
    pull: always
  environment:
    DOCKER_BUILDKIT: "1"
  ignore_errors: yes
  register: compose_build_result
  when: compose_files.matched > 0

- name: Build Docker images with fallback command
  ansible.builtin.shell: |
    cd "{{ app_directory }}/infra"
    echo "Current directory: $(pwd)"
    echo "Files in directory:"
    ls -la
    echo "Looking for compose files..."
    
    if [ -f docker-compose.yml ]; then
      echo "Found docker-compose.yml, building..."
      docker compose build --pull
    elif [ -f docker-compose.yaml ]; then
      echo "Found docker-compose.yaml, building..."
      docker compose -f docker-compose.yaml build --pull
    else
      echo "ERROR: No docker-compose file found in $(pwd)"
      echo "Directory contents:"
      find . -name "*compose*" -type f
      exit 1
    fi
  environment:
    DOCKER_BUILDKIT: "1"
  when: 
    - compose_build_result.failed | default(false)
    - not ansible_check_mode
  register: fallback_build_result

- name: Debug fallback build result
  ansible.builtin.debug:
    var: fallback_build_result
  when: 
    - compose_build_result.failed | default(false)
    - not ansible_check_mode

- name: Start services
  community.docker.docker_compose_v2:
    project_src: "{{ app_directory }}/infra"
    state: present
    recreate: always
  ignore_errors: yes
  register: compose_start_result

- name: Start services with fallback command
  ansible.builtin.shell: |
    cd "{{ app_directory }}/infra"
    echo "Current directory: $(pwd)"
    echo "Files in directory:"
    ls -la
    echo "Looking for compose files..."
    
    if [ -f docker-compose.yml ]; then
      echo "Found docker-compose.yml, starting services..."
      docker compose up -d --force-recreate
    elif [ -f docker-compose.yaml ]; then
      echo "Found docker-compose.yaml, starting services..."
      docker compose -f docker-compose.yaml up -d --force-recreate
    else
      echo "ERROR: No docker-compose file found in $(pwd)"
      echo "Directory contents:"
      find . -name "*compose*" -type f
      exit 1
    fi
  when: 
    - compose_start_result.failed | default(false)
    - not ansible_check_mode
  register: fallback_start_result

- name: Debug fallback start result
  ansible.builtin.debug:
    var: fallback_start_result
  when: 
    - compose_start_result.failed | default(false)
    - not ansible_check_mode

- name: Wait for services to be healthy
  ansible.builtin.uri:
    url: "http://localhost:{{ item.port }}/{{ item.path }}"
    method: GET
    status_code: 200
  register: health_check
  until: health_check.status == 200
  retries: 30
  delay: 10
  loop:
    - { port: 80, path: 'health' }
    - { port: 8000, path: 'health' }
    - { port: 8001, path: 'health' }
    - { port: 8002, path: 'health' }
    - { port: 8003, path: 'health' }
  ignore_errors: yes