version: '3.8'

services:
  # База данных Cassandra
  cassandra:
    build:
      context: ./cassandra
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_BROADCAST_ADDRESS=cassandra
      - "JVM_OPTS=-Djava.rmi.server.hostname=cassandra"
      # OpenTelemetry tracing configuration for Cassandra
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_SERVICE_NAME=cassandra
      - OTEL_RESOURCE_ATTRIBUTES=service.name=cassandra,service.version=4.1
    networks:
      - product-store-net
    volumes:
      - cassandra_data:/var/lib/cassandra
    restart: unless-stopped
    depends_on:
      jaeger:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra" ,"-e", "describe keyspaces"]
      interval: 15s
      timeout: 10s
      retries: 10

  # Backend API сервис
  backend:
    build:
      context: ..
      dockerfile: app/backend/Dockerfile
    container_name: infra-backend
    depends_on:
      cassandra:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    environment:
      - CASSANDRA_HOST=cassandra
      - SECRET_KEY=supersecretkey123
      # Jaeger tracing configuration
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=backend-service
      - OTEL_RESOURCE_ATTRIBUTES=service.name=backend-service,service.version=1.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/system/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - product-store-net

  # Сервис корзины
  cart-service:
    build:
      context: ..
      dockerfile: app/cart-service/Dockerfile
    container_name: infra-cart-service
    depends_on:
      jaeger:
        condition: service_healthy
    environment:
      - BACKEND_URL=http://backend:8000
      - ORDER_SERVICE_URL=http://order-service:8002
      - SECRET_KEY=supersecretkey123
      # Jaeger tracing configuration
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=cart-service
      - OTEL_RESOURCE_ATTRIBUTES=service.name=cart-service,service.version=1.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - product-store-net

  # Сервис заказов
  order-service:
    build:
      context: ..
      dockerfile: app/order-service/Dockerfile
    container_name: infra-order-service
    depends_on:
      jaeger:
        condition: service_healthy
    environment:
      - BACKEND_URL=http://backend:8000
      - USER_SERVICE_URL=http://user-service:8003
      - SECRET_KEY=supersecretkey123
      # Jaeger tracing configuration
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=order-service
      - OTEL_RESOURCE_ATTRIBUTES=service.name=order-service,service.version=1.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - product-store-net

  # Сервис пользователей
  user-service:
    build:
      context: ..
      dockerfile: app/user-service/Dockerfile
    container_name: infra-user-service
    depends_on:
      jaeger:
        condition: service_healthy
    environment:
      - CART_SERVICE_URL=http://cart-service:8001
      - ORDER_SERVICE_URL=http://order-service:8002
      - SECRET_KEY=supersecretkey123
      # Jaeger tracing configuration
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=user-service
      - OTEL_RESOURCE_ATTRIBUTES=service.name=user-service,service.version=1.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - product-store-net

  # Документация (mkdocs)
  docs:
    build:
      context: ..
      dockerfile: app/docs/Dockerfile
    container_name: infra-docs
    networks:
      - product-store-net

  # Swagger UI
  swagger-ui:
    build:
      context: ..
      dockerfile: app/swagger-ui/Dockerfile
    container_name: infra-swagger-ui
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/swagger.json"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - product-store-net

  locust:
    build: 
      context: .
      dockerfile: locust.Dockerfile
    container_name: locust
    ports:
      - "8089:8089"
    environment:
      - LOCUST_HOST=http://nginx
    volumes:
      - ./locust:/mnt/locust
    networks:
      - product-store-net
    command: -f /mnt/locust/locustfile.py

  # Nginx для маршрутизации запросов
  nginx:
    build:
      context: ..
      dockerfile: app/nginx/Dockerfile
    container_name: infra-nginx
    depends_on:
      - backend
      - user-service
      - cart-service
      - order-service
    ports:
      - "80:80"
      # - "8080:8080"
    environment:
      # Переменные для будущей интеграции с трейсингом
      - OTEL_SERVICE_NAME=nginx-proxy
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    networks:
      - product-store-net
    restart: unless-stopped

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter
    container_name: nginx-exporter
    command: -nginx.scrape-uri http://nginx:8080/stub_status
    ports:
      - "9113:9113" # Порт, на котором экспортер будет отдавать метрики для Prometheus
      # the default metrics path -- /metrics
    depends_on:
      - nginx
    networks:
      - product-store-net
    restart: unless-stopped

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - product-store-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
    networks:
      - product-store-net
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger для трейсинга
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "4317:4317"   # OpenTelemetry gRPC receiver
      - "4318:4318"   # OpenTelemetry HTTP receiver  
      - "14250:14250" # Jaeger gRPC receiver
      - "14268:14268" # Jaeger HTTP receiver
      - "6831:6831/udp" # Jaeger UDP receiver (legacy)
      - "6832:6832/udp" # Jaeger UDP receiver (legacy)
      - "5778:5778"   # Configuration service
      - "14269:14269" # Admin port для метрик
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - JAEGER_DISABLED=false
      - MEMORY_MAX_TRACES=50000
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - product-store-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:16686/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  cassandra_data:
  prometheus_data:
  grafana_data:

networks:
  product-store-net:
    driver: bridge