version: '3.8'

services:
  # База данных Cassandra
  cassandra:
    build:
      context: ./cassandra
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_BROADCAST_ADDRESS=cassandra
      - "JVM_OPTS=-Djava.rmi.server.hostname=cassandra"
    networks:
      - product-store-net
    volumes:
      - cassandra_data:/var/lib/cassandra
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra" ,"-e", "describe keyspaces"]
      interval: 15s
      timeout: 10s
      retries: 10

  # Backend API сервис
  backend:
    build:
      context: ..
      dockerfile: app/backend/Dockerfile
    container_name: infra-backend
    depends_on:
      cassandra:
        condition: service_healthy
    environment:
      - CASSANDRA_HOST=cassandra
      - SECRET_KEY=supersecretkey123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/system/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - product-store-net

  # Сервис корзины
  cart-service:
    build:
      context: ..
      dockerfile: app/cart-service/Dockerfile
    container_name: infra-cart-service
    environment:
      - BACKEND_URL=http://backend:8000
      - ORDER_SERVICE_URL=http://order-service:8002
      - SECRET_KEY=supersecretkey123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - product-store-net

  # Сервис заказов
  order-service:
    build:
      context: ..
      dockerfile: app/order-service/Dockerfile
    container_name: infra-order-service
    environment:
      - BACKEND_URL=http://backend:8000
      - USER_SERVICE_URL=http://user-service:8003
      - SECRET_KEY=supersecretkey123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - product-store-net

  # Сервис пользователей
  user-service:
    build:
      context: ..
      dockerfile: app/user-service/Dockerfile
    container_name: infra-user-service
    environment:
      - CART_SERVICE_URL=http://cart-service:8001
      - ORDER_SERVICE_URL=http://order-service:8002
      - SECRET_KEY=supersecretkey123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - product-store-net

  # Документация (mkdocs)
  docs:
    build:
      context: ..
      dockerfile: app/docs/Dockerfile
    container_name: infra-docs
    networks:
      - product-store-net

  # Swagger UI
  swagger-ui:
    build:
      context: ..
      dockerfile: app/swagger-ui/Dockerfile
    container_name: infra-swagger-ui
    depends_on:
      backend:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/swagger.json"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - product-store-net

  locust:
    image: locustio/locust
    container_name: locust
    ports:
      - "8089:8089"
    environment:
      - LOCUST_HOST=http://nginx
    volumes:
      - ./locust:/mnt/locust
    networks:
      - product-store-net
    command: -f /mnt/locust/locustfile.py

  # Nginx для маршрутизации запросов
  nginx:
    build:
      context: ..
      dockerfile: app/nginx/Dockerfile
    container_name: infra-nginx
    ports:
      - "80:80"
      # - "8080:8080"
    networks:
      - product-store-net
    restart: unless-stopped

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter
    container_name: nginx-exporter
    command: -nginx.scrape-uri http://nginx:8080/stub_status
    ports:
      - "9113:9113" # Порт, на котором экспортер будет отдавать метрики для Prometheus
      # the default metrics path -- /metrics
    depends_on:
      - nginx
    networks:
      - product-store-net
    restart: unless-stopped

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - product-store-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
    networks:
      - product-store-net
    restart: unless-stopped
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/jaeger:2.2.0
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "4317:4317"   # OpenTelemetry gRPC
      - "4318:4318"   # OpenTelemetry HTTP
      - "5778:5778"   # Configuration service
    restart: unless-stopped

volumes:
  cassandra_data:
  prometheus_data:
  grafana_data:

networks:
  product-store-net:
    driver: bridge