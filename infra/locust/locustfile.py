import random
import logging
import time
import threading
from locust import HttpUser, task, between, events

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.getLogger("urllib3").setLevel(logging.WARNING)
logging.basicConfig(level=logging.INFO)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ñ–∞–∑ ---
current_phase = 1
products_count = 0
phase_lock = threading.Lock()
registered_admins = []
registered_users = []

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TARGET_PRODUCTS = 5000
CATEGORIES = [
    "–§—Ä—É–∫—Ç—ã", "–û–≤–æ—â–∏", "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", "–ù–∞–ø–∏—Ç–∫–∏", "–ë–∞–∫–∞–ª–µ—è", 
    "–ú—è—Å–æ", "–°–ª–∞–¥–∫–æ–µ", "–ü–µ–ª—å–º–µ–Ω–∏", "–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —É–±–æ—Ä–∫–∏", "–°–∏–≥–∞—Ä–µ—Ç—ã", "–ê–ª–∫–æ–≥–æ–ª—å"
]

PRODUCT_NAMES = {
    "–§—Ä—É–∫—Ç—ã": ["–Ø–±–ª–æ–∫–∏", "–ë–∞–Ω–∞–Ω—ã", "–ê–ø–µ–ª—å—Å–∏–Ω—ã", "–ì—Ä—É—à–∏", "–ö–∏–≤–∏", "–ú–∞–Ω–≥–æ", "–ê–Ω–∞–Ω–∞—Å"],
    "–û–≤–æ—â–∏": ["–ú–æ—Ä–∫–æ–≤—å", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–õ—É–∫", "–¢–æ–º–∞—Ç—ã", "–û–≥—É—Ä—Ü—ã", "–ö–∞–ø—É—Å—Ç–∞", "–ü–µ—Ä–µ—Ü"],
    "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": ["–ú–æ–ª–æ–∫–æ", "–¢–≤–æ—Ä–æ–≥", "–°—ã—Ä", "–ô–æ–≥—É—Ä—Ç", "–ö–µ—Ñ–∏—Ä", "–°–º–µ—Ç–∞–Ω–∞"],
    "–ù–∞–ø–∏—Ç–∫–∏": ["–ö–æ–∫–∞-–∫–æ–ª–∞", "–°–ø—Ä–∞–π—Ç", "–§–∞–Ω—Ç–∞", "–í–æ–¥–∞", "–°–æ–∫", "–ß–∞–π", "–ö–æ—Ñ–µ"],
    "–ë–∞–∫–∞–ª–µ—è": ["–•–ª–µ–±", "–ú–∞–∫–∞—Ä–æ–Ω—ã", "–†–∏—Å", "–ì—Ä–µ—á–∫–∞", "–ú—É–∫–∞", "–°–∞—Ö–∞—Ä", "–°–æ–ª—å"],
    "–ú—è—Å–æ": ["–ì–æ–≤—è–¥–∏–Ω–∞", "–°–≤–∏–Ω–∏–Ω–∞", "–ö—É—Ä–∏—Ü–∞", "–ò–Ω–¥–µ–π–∫–∞", "–ö–æ–ª–±–∞—Å–∞", "–°–æ—Å–∏—Å–∫–∏"],
    "–°–ª–∞–¥–∫–æ–µ": ["–®–æ–∫–æ–ª–∞–¥", "–ö–æ–Ω—Ñ–µ—Ç—ã", "–ü–µ—á–µ–Ω—å–µ", "–¢–æ—Ä—Ç", "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", "–í–∞—Ñ–ª–∏"],
    "–ü–µ–ª—å–º–µ–Ω–∏": ["–ü–µ–ª—å–º–µ–Ω–∏ –º—è—Å–Ω—ã–µ", "–í–∞—Ä–µ–Ω–∏–∫–∏", "–ú–∞–Ω—Ç—ã", "–•–∏–Ω–∫–∞–ª–∏", "–†–∞–≤–∏–æ–ª–∏"],
    "–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —É–±–æ—Ä–∫–∏": ["–ü–æ—Ä–æ—à–æ–∫", "–ú—ã–ª–æ", "–®–∞–º–ø—É–Ω—å", "–ú–æ—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ"],
    "–°–∏–≥–∞—Ä–µ—Ç—ã": ["Marlboro", "Parliament", "Lucky Strike", "Camel"],
    "–ê–ª–∫–æ–≥–æ–ª—å": ["–í–æ–¥–∫–∞", "–í–∏–Ω–æ", "–ü–∏–≤–æ", "–ö–æ–Ω—å—è–∫", "–í–∏—Å–∫–∏"]
}


def check_products_count(client, headers):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î"""
    global products_count
    try:
        response = client.get("/api/products/", headers=headers)
        if response.status_code == 200:
            data = response.json()
            if isinstance(data, dict) and 'items' in data:
                products_count = data.get('total', 0)
            elif isinstance(data, list):
                products_count = len(data)
            logging.info(f"Current products count: {products_count}")
            return products_count
    except Exception as e:
        logging.error(f"Error checking products count: {e}")
    return 0


class BaseUser(HttpUser):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    abstract = True
    token = None
    headers = {}
    username = None

    def register_user(self, username, password, is_admin=False):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = {
            "username": username,
            "full_name": f"User {username}",
            "phone": f"+7{random.randint(9000000000, 9999999999)}",
            "password": password
        }
        
        try:
            response = self.client.post("/user-api/users/register", json=user_data)
            if response.status_code in [200, 201]:
                logging.info(f"User {username} registered successfully")
                return True
            else:
                logging.warning(f"Failed to register {username}: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            logging.error(f"Registration error for {username}: {e}")
            return False

    def login(self, username, password):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω"""
        creds = {"username": username, "password": password}
        try:
            response = self.client.post("/user-api/token", data=creds)
            if response.status_code == 200:
                self.token = response.json()["access_token"]
                self.headers = {"Authorization": f"Bearer {self.token}"}
                self.username = username
                logging.info(f"User {username} logged in successfully")
                return True
            else:
                logging.warning(f"Failed to login {username}: {response.status_code}")
                return False
        except Exception as e:
            logging.error(f"Login error for {username}: {e}")
            return False


class DynamicUser(BaseUser):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã"""
    weight = 1
    wait_time = between(0.5, 3)
    
    user_role = None  # 'admin', 'user', 'customer'
    viewed_products = []
    cart_items = {}

    def on_start(self):
        global current_phase, registered_admins, registered_users
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
        if current_phase == 1:
            # –§–∞–∑–∞ 1: —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –∞–¥–º–∏–Ω–æ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∞–¥–º–∏–Ω–æ–≤
            if len(registered_admins) < 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤
                self.become_admin()
            else:
                self.wait_for_next_phase()
                
        elif current_phase == 2:
            # –§–∞–∑–∞ 2: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if len(registered_users) < 50:
                self.become_user()
            else:
                self.wait_for_next_phase()
                
        elif current_phase == 3:
            # –§–∞–∑–∞ 3: –≤—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
            if len(registered_users) > 0:
                if random.random() < 0.1 and len(registered_admins) > 0:  # 10% –∞–¥–º–∏–Ω–æ–≤
                    self.become_existing_admin()
                else:  # 90% –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
                    self.become_existing_customer()
            else:
                self.wait_for_next_phase()
    
    def become_admin(self):
        """–°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        global registered_admins
        admin_num = len(registered_admins) + 1
        username = f"admin_{admin_num}_{random.randint(1000, 9999)}"
        password = "admin123"
        
        if self.register_user(username, password, is_admin=True):
            if self.login(username, password):
                with phase_lock:
                    registered_admins.append(username)
                    self.user_role = 'admin'
                logging.info(f"‚úÖ New admin created: {username}")
    
    def become_user(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        global registered_users, current_phase
        user_num = len(registered_users) + 1
        username = f"user_{user_num}_{random.randint(1000, 9999)}"
        password = "user123"
        
        if self.register_user(username, password):
            if self.login(username, password):
                with phase_lock:
                    registered_users.append(username)
                    self.user_role = 'user'
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ 3
                    if len(registered_users) >= 50:
                        if current_phase == 2:
                            current_phase = 3
                            logging.info(f"üéâ PHASE 2 COMPLETE! Users registered: {len(registered_users)}. Moving to PHASE 3...")
                
                logging.info(f"‚úÖ New user registered: {username}")
    
    def become_existing_customer(self):
        """–°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"""
        global registered_users
        if registered_users:
            username = random.choice(registered_users)
            password = "user123"
            
            if self.login(username, password):
                self.user_role = 'customer'
                logging.info(f"üõí Customer {username} started shopping")
    
    def become_existing_admin(self):
        """–°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–¥–º–∏–Ω–æ–º"""
        global registered_admins
        if registered_admins:
            username = random.choice(registered_admins)
            password = "admin123"
            
            if self.login(username, password):
                self.user_role = 'admin'
                logging.info(f"üîß Admin {username} started maintenance")
    
    def wait_for_next_phase(self):
        """–û–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑—ã"""
        self.user_role = 'waiting'

    @task(20)
    def execute_role_task(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏ —Ñ–∞–∑—ã"""
        global current_phase
        
        if self.user_role == 'admin' and current_phase == 1:
            self.admin_add_products()
        elif self.user_role == 'user' and current_phase == 2:
            self.user_wait()
        elif self.user_role == 'customer' and current_phase == 3:
            self.customer_browse_and_shop()
        elif self.user_role == 'admin' and current_phase == 3:
            self.admin_maintain_stock()
        elif self.user_role == 'waiting':
            self.wait_for_role_assignment()
    
    def admin_add_products(self):
        """–ê–¥–º–∏–Ω—Å–∫–∞—è –∑–∞–¥–∞—á–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–∑–µ 1"""
        global current_phase, products_count
        
        if not self.token:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        current_count = check_products_count(self.client, self.headers)
        
        if current_count >= TARGET_PRODUCTS:
            with phase_lock:
                if current_phase == 1:
                    current_phase = 2
                    logging.info(f"üéâ PHASE 1 COMPLETE! Products added: {current_count}. Moving to PHASE 2...")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–∞—á–∫–∞–º–∏
        for _ in range(5):  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 5 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Ä–∞–∑
            category = random.choice(CATEGORIES)
            product_names = PRODUCT_NAMES.get(category, ["Generic Product"])
            base_name = random.choice(product_names)
            
            product_data = {
                "name": f"{base_name} {random.randint(1, 999)}",
                "category": category,
                "price": round(random.uniform(10, 1000), 2),
                "stock_count": random.randint(50, 500)
            }
            
            try:
                response = self.client.post("/api/products/", headers=self.headers, json=product_data)
                if response.status_code not in [200, 201]:
                    logging.error(f"Failed to create product: {response.status_code} - {response.text}")
            except Exception as e:
                logging.error(f"Error creating product: {e}")
    
    def user_wait(self):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —Ñ–∞–∑—ã 3"""
        time.sleep(2)
    
    def customer_browse_and_shop(self):
        """–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ñ–∞–∑–µ 3"""
        if not self.token:
            return
            
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        activity = random.choice(['browse', 'add_to_cart', 'modify_cart', 'checkout', 'check_orders'])
        
        if activity == 'browse':
            self.browse_products()
        elif activity == 'add_to_cart' and self.viewed_products:
            self.add_to_cart()
        elif activity == 'modify_cart' and self.cart_items:
            self.modify_cart()
        elif activity == 'checkout' and self.cart_items:
            self.checkout()
        elif activity == 'check_orders':
            self.check_orders()
    
    def admin_maintain_stock(self):
        """–ê–¥–º–∏–Ω—Å–∫–∞—è –∑–∞–¥–∞—á–∞: –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–∑–µ 3"""
        if not self.token:
            return
            
        if random.random() < 0.7:  # 70% –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
            self.restock_products()
        else:  # 30% –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            self.add_new_products()
    
    def wait_for_role_assignment(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏"""
        global current_phase
        time.sleep(2)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if current_phase == 2 and self.user_role == 'waiting' and len(registered_users) < 50:
            self.become_user()
        elif current_phase == 3 and self.user_role == 'waiting':
            if len(registered_users) > 0:
                if random.random() < 0.1 and len(registered_admins) > 0:
                    self.become_existing_admin()
                else:
                    self.become_existing_customer()

    # –ú–µ—Ç–æ–¥—ã –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∫–ª–∞—Å—Å–æ–≤ (—Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)
    def browse_products(self):
        """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        category = random.choice(CATEGORIES)
        try:
            response = self.client.get(f"/api/products/?category={category}", headers=self.headers)
            if response.status_code == 200:
                data = response.json()
                items = data.get('items', []) if isinstance(data, dict) else data
                
                if items and isinstance(items, list):
                    product = random.choice(items)
                    product_id = product.get("product_id") or product.get("id")
                    if product_id:
                        self.viewed_products.append(product_id)
                        self.viewed_products = self.viewed_products[-20:]
                        
                        # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
                        self.client.get(f"/api/products/{product_id}", headers=self.headers)
        except Exception as e:
            logging.error(f"Error browsing products: {e}")

    def add_to_cart(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        if not self.viewed_products:
            return
            
        product_id = random.choice(self.viewed_products)
        cart_data = {
            "product_id": product_id,
            "quantity": random.randint(1, 5)
        }
        
        try:
            response = self.client.post("/cart-api/cart/items", headers=self.headers, json=cart_data)
            if response.status_code in [200, 201]:
                cart_response = response.json()
                if isinstance(cart_response, dict) and 'items' in cart_response:
                    for item in cart_response['items']:
                        if item.get('product_id') == product_id:
                            self.cart_items[item.get('id')] = product_id
        except Exception as e:
            logging.error(f"Error adding to cart: {e}")

    def modify_cart(self):
        """–ò–∑–º–µ–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        if not self.cart_items:
            return
            
        item_id = random.choice(list(self.cart_items.keys()))
        
        if random.random() < 0.3:  # 30% —É–¥–∞–ª—è–µ–º
            try:
                response = self.client.delete(f"/cart-api/cart/items/{item_id}", headers=self.headers)
                if response.status_code == 200:
                    del self.cart_items[item_id]
            except Exception as e:
                logging.error(f"Error deleting cart item: {e}")
        else:  # 70% –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            update_data = {"quantity": random.randint(1, 10)}
            try:
                self.client.put(f"/cart-api/cart/items/{item_id}", headers=self.headers, json=update_data)
            except Exception as e:
                logging.error(f"Error updating cart item: {e}")

    def checkout(self):
        """–û—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑"""
        try:
            response = self.client.post("/cart-api/cart/checkout", headers=self.headers)
            if response.status_code in [200, 201]:
                self.cart_items = {}
                logging.info(f"Order completed by {self.username}")
        except Exception as e:
            logging.error(f"Error during checkout: {e}")

    def check_orders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã"""
        try:
            self.client.get("/user-api/users/me/orders", headers=self.headers)
            self.client.get("/user-api/users/me/profile", headers=self.headers)
        except Exception as e:
            logging.error(f"Error checking orders: {e}")

    def restock_products(self):
        """–ü–æ–ø–æ–ª–Ω—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è"""
        try:
            response = self.client.get("/api/products/", headers=self.headers)
            if response.status_code == 200:
                data = response.json()
                items = data.get('items', []) if isinstance(data, dict) else data
                
                if items:
                    low_stock_products = [
                        p for p in items 
                        if isinstance(p, dict) and p.get('stock_count', 0) < 20
                    ]
                    
                    if low_stock_products:
                        product = random.choice(low_stock_products)
                        product_id = product.get('product_id') or product.get('id')
                        
                        updated_data = {
                            "name": product.get('name'),
                            "category": product.get('category'),
                            "price": product.get('price'),
                            "stock_count": product.get('stock_count', 0) + random.randint(50, 200)
                        }
                        
                        self.client.put(f"/api/products/{product_id}", headers=self.headers, json=updated_data)
                        logging.info(f"Restocked product {product.get('name')}")
        except Exception as e:
            logging.error(f"Error restocking products: {e}")

    def add_new_products(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        category = random.choice(CATEGORIES)
        product_names = PRODUCT_NAMES.get(category, ["New Product"])
        base_name = random.choice(product_names)
        
        product_data = {
            "name": f"{base_name} Premium {random.randint(100, 999)}",
            "category": category,
            "price": round(random.uniform(50, 2000), 2),
            "stock_count": random.randint(20, 100)
        }
        
        try:
            response = self.client.post("/api/products/", headers=self.headers, json=product_data)
            if response.status_code in [200, 201]:
                logging.info(f"Added new product: {product_data['name']}")
        except Exception as e:
            logging.error(f"Error adding new product: {e}")


@events.test_start.add_listener
def on_test_start(environment, **kwargs):
    """–°–æ–±—ã—Ç–∏–µ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global current_phase
    logging.info("üöÄ STARTING 3-PHASE LOAD TEST")
    logging.info("üìã PHASE 1: Admins will add products until 5000+ items")
    logging.info("üìã PHASE 2: Users will register")
    logging.info("üìã PHASE 3: Full shopping simulation")
    current_phase = 1


@events.test_stop.add_listener
def on_test_stop(environment, **kwargs):
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.info("üèÅ LOAD TEST COMPLETED")
    logging.info(f"Final phase: {current_phase}")
    logging.info(f"Products created: {products_count}")
    logging.info(f"Admins registered: {len(registered_admins)}")
    logging.info(f"Users registered: {len(registered_users)}")


def log_phase_status():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–∞–∑"""
    def status_logger():
        while True:
            time.sleep(30)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            logging.info(f"üìä STATUS - Phase: {current_phase}, Products: {products_count}, "
                        f"Admins: {len(registered_admins)}, Users: {len(registered_users)}")
    
    status_thread = threading.Thread(target=status_logger, daemon=True)
    status_thread.start()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
log_phase_status()
